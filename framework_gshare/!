#ifndef PREDICTOR_H_SEEN
#define PREDICTOR_H_SEEN

#include <cstddef>
#include <cstring>
#include <inttypes.h>
#include <vector>
#include "op_state.h"   // defines op_state_c (architectural state) class 
#include "tread.h"      // defines branch_record_c class

#define PHT_SIZE 16384 // 2^14 entries
#define PHT_INDEX_MASK 0x3FFF // Mask for indexing into the PHT

class PREDICTOR
{
private:
    uint16_t global_history; // 14-bit global history register
    uint8_t pht[PHT_SIZE]; // Pattern history table with 2-bit counters

public:
    PREDICTOR(); // Constructor to initialize the predictor
    bool get_prediction(const branch_record_c* br, const op_state_c* os);
    void update_predictor(const branch_record_c* br, const op_state_c* os, bool taken);

}; 
